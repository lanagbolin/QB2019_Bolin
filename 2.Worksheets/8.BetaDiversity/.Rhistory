Q
expm(Q * 1)
expm(Q * 10)
expm(Q * 100)
source('~/Dropbox/Rscripts/ELME/SM/sis.r')
source('~/Dropbox/Rscripts/ELME/SM/sis.r')
debug(SISSimulation)
SISSimulation()
function(b = 2, g = 1, N = 100, I0 = 10, maxt = 20, seed = NULL, ...){
# Simulate and plot a realization of a stochastic SIS model using the so-called Gillespie algorithm
#
# Args:
#   [b]eta: the force of infection
#   [g]: the recovery rate of infectious individuals
#   [N]: the population size
#   I0: the initial size of the infectious population
#   seed: the random number seed
#   ...: optional plot arguments
#
# Returns:
#   a plot of I(t) vs t from time = 0 to time = maxt
# set up axes
plot(c(0, maxt), c(0, N), type = "n", xlab = "t", ylab = "")
# i is the number of infectious individuals
i <- I0
# counter to keep track of time
time <- 0
# keep going as long as we have not reached the maximum time, and the infection has not died out
while (time < maxt & i > 0) {
rate1 <- (b / N) * (N - i) * i # I -> I + 1
rate2 <- g * i # I -> I - 1
sojourn <- rexp(1, rate1 + rate2)
segments(time, i, time + sojourn, i, col = "red")
change <- sample(c(1, -1), 1, prob = c(rate1, rate2))
segments(time + sojourn, i, time + sojourn, i + change, lwd = 0.5, col = "red")
# update i and time
i <- i + change
time <- time + sojourn
}
}
SISSimulation <- function(b = 2, g = 1, N = 100, I0 = 10, maxt = 20, seed = NULL, ...){
# Simulate and plot a realization of a stochastic SIS model using the so-called Gillespie algorithm
#
# Args:
#   [b]eta: the force of infection
#   [g]: the recovery rate of infectious individuals
#   [N]: the population size
#   I0: the initial size of the infectious population
#   seed: the random number seed
#   ...: optional plot arguments
#
# Returns:
#   a plot of I(t) vs t from time = 0 to time = maxt
# set up axes
plot(c(0, maxt), c(0, N), type = "n", xlab = "t", ylab = "")
# i is the number of infectious individuals
i <- I0
# counter to keep track of time
time <- 0
# keep going as long as we have not reached the maximum time, and the infection has not died out
while (time < maxt & i > 0) {
rate1 <- (b / N) * (N - i) * i # I -> I + 1
rate2 <- g * i # I -> I - 1
sojourn <- rexp(1, rate1 + rate2)
segments(time, i, time + sojourn, i, col = "red")
change <- sample(c(1, -1), 1, prob = c(rate1, rate2))
segments(time + sojourn, i, time + sojourn, i + change, lwd = 0.5, col = "red")
# update i and time
i <- i + change
time <- time + sojourn
}
}
SISLimitDistribution <- function(b = 2, g = 1, N = 100, ...){
# Calculate the quasi-stationary distribution for a SIS model with a closed population
#
# Args:
#   [b]eta: the force of infection
#   [g]: the recovery rate of infectious individuals
#   [N]: the population size
#   ...: optional plot arguments
#
# Returns:
#   the quasi-stationary distribution of the number of infectives
# start with a diagonal matrix, with exit rates on the diagonal
diagonal <- -1 * ((b/N) * (N-(0:N)) * (0:N) + g * (0:N)) # these are the exit rates
Q <- diag(diagonal) # now form the matrix
# add the off-diagonal matrix elements
for (i in 1:N){
Q[i+1,i] <- g * i
Q[i,i+1] <- (b / N) * (N - (i - 1)) * (i - 1)
}
# check to make sure row sums of Q = 0
if (max(abs(apply(Q, 1, sum)))> 1e-6) {
stop("Something is wrong here; row sums of Q != 0")
}
# remove first row & col
Q <- Q[-1, -1]
ttt <- eigen(t(Q))
# find the index of the eigenvalue == 0
my.index <- which(Re(ttt$values) == max(Re(ttt$values)))
# pull out the corresponding eigenvector
quasi <- Re(ttt$vectors[, my.index])
# re-scale so that the elements sum to 1
quasi <- quasi / sum(quasi)
# make a plot
barplot(quasi, names = 1:N)
expected.i <- sum((1:N) * quasi)
variance.i <- sum((((1:N) - expected.i) ^ 2) * quasi)
return(list(quasi = quasi, mean = expected.i, var = variance.i))
}
library(rjags)
install.packages("rjags")
install.packages("coda")
install.packages("runjags")
install.packages("MCMpack")
library(rjags)
library(coda)
library(runjags)
library(MASS)
library(MCMCpack)
View(crawley)
# Chunk 1
rm(list = ls())
getwd()
setwd("~/GitHub/QB2019_Bolin/2.Worksheets/8.BetaDiversity/")
require("vegan")
package.list <- c("vegan", "ade4", "viridis", "gplots", "BiodiversityR", "indicspecies")
for (package in package.list) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
install.packages(package)
library(package, character.only = TRUE)
}
}
# Chunk 2
# note, pleae do not print the dataset when submitting
data(doubs)
# Chunk 3
quality <- c(rep("HQ", 13), rep("MQ", 5), rep("LQ", 6), rep("MQ", 5))
fish <- doubs$fish
fish <- fish[-8, ]
# PERMANOVA
adonis(fish ~ quality, method = "bray", permutations = 999)
# IndVal
indval <- multipatt(fish, cluster = quality, func = "IndVal.g", control = how(nperm = 999))
summary(indval)
# phi coefficient analysis
fish.rel <- decostand(fish, method = "total")
phi <- multipatt(fish.rel, cluster = quality, func = "r.g", control = how(nperm = 999))
summary(phi)
# Chunk 4
# Distance matrices
fish.dist <- vegdist(doubs$fish[-8, ], method = "bray")
env.dist <- vegdist(scale(doubs$env[-8, ]), method = "euclid")
# Mantel test
mantel(fish.dist, env.dist)
# Chunk 5
# 1
env.chem <- as.matrix(doubs$env[-8, 5:11])
## Deal with overfitting
fish.db <- vegdist(fish, method = "bray")
doubs.dbrda.mod0 <- dbrda(fish.db ~ 1, as.data.frame(env.chem))
ordiplot(doubs.dbrda.mod0)
doubs.dbrda.mod1 <- dbrda(fish.db ~ ., as.data.frame(env.chem))
doubs.dbrda <- ordiR2step(doubs.dbrda.mod0, doubs.dbrda.mod1, perm.max = 200)  # best model
# 2
doubs.dbrda$call
doubs.dbrda$anova
ordiplot(doubs.dbrda)
# 3
permutest(doubs.dbrda, permutations = 999)
# 4
envfit(doubs.dbrda, env.chem, perm = 999)
# 5
dbrda.explainvar1 <- round(doubs.dbrda$CCA$eig[1] / sum(c(doubs.dbrda$CCA$eig, doubs.dbrda$CA$eig)), 3) * 100
dbrda.explainvar2 <- round(doubs.dbrda$CCA$eig[2] / sum(c(doubs.dbrda$CCA$eig, doubs.dbrda$CA$eig)), 3) * 100
dbrda.explainvar1
dbrda.explainvar2
# 6
par(mar = c(5, 5, 4, 4) + 0.1)
plot(scores(doubs.dbrda, display = "wa"), xlim = c(-1.3, 1.1), ylim = c(-1.1, 2.7),
xlab = paste("dbRDA 1 (", dbrda.explainvar1, "%)", sep = ""),
ylab = paste("dbRDA 2 (", dbrda.explainvar2, "%)", sep = ""),
pch = 16, cex = 2, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
points(scores(doubs.dbrda, display = "wa"),
pch = 19, cex = 3, bg = "gray", col = "gray")
text(scores(doubs.dbrda, display = "wa"),
labels = row.names(scores(doubs.dbrda, display = "wa")))
# 7
vectors <- scores(doubs.dbrda, display = "bp")
arrows(0, 0, vectors[, 1], vectors[, 2],
lwd = 2, lty = 1, length = 0.2, col = "red")
text(vectors[, 1], vectors[, 2], pos = 3, labels = row.names(vectors))
axis(side = 3, lwd.ticks = 2, cex.axis = 1.2, las = 1, col = "red", lwd = 2.2,
at = pretty(range(vectors[, 1])) * 2, labels = pretty(range(vectors[, 1])))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.2, las = 1, col = "red", lwd = 2.2,
at = pretty(range(vectors[, 2])) * 2, labels = pretty(range(vectors[, 2])))
# Chunk 6
# 1
env.mod <- model.matrix( ~ oxy + bdo + nit, as.data.frame(env.chem))[, -1]
# 2
rs <- rowSums(fish) / sum(fish)
doubs.pcnmw <- pcnm(dist(doubs$xy[-8, ]), w = rs, dist.ret = T)
doubs.pcnmw$values > 0
doubs.space <- as.data.frame(scores(doubs.pcnmw))
doubs.pcm.mod0 <- dbrda(fish.db ~ 1, doubs.space)
doubs.pcm.mod1 <- dbrda(fish.db ~ ., doubs.space)
step.pcnm <- ordiR2step(doubs.pcm.mod0, doubs.pcm.mod1, perm.max = 200)  # best model
plot(step.pcnm)
step.pcnm$anova
space.mod <- model.matrix(~ PCNM2 + PCNM3 + PCNM5 + PCNM1 + PCNM13 + PCNM16 + PCNM6, doubs.space)[, -1]   # model matrix
# 3
## Constrained
doubs.total.env <- dbrda(fish.db ~ env.mod)
doubs.total.space <- dbrda(fish.db ~ space.mod)
## Partial Constrained
doubs.env.cond.space <- dbrda(fish.db ~ env.mod + Condition(space.mod))
doubs.space.cond.env <- dbrda(fish.db ~ space.mod + Condition(env.mod))
# 4
permutest(doubs.env.cond.space, permutations = 999)
permutest(doubs.space.cond.env, permutations = 999)
permutest(doubs.total.env, permutations = 999)
permutest(doubs.total.space, permutations = 999)
# 5
doubs.varpart <- varpart(fish.db, env.mod, space.mod)
doubs.varpart
# 6
par(mar = c(2, 2, 2, 2))
plot(doubs.varpart)
text(1, 0.25, "Space")
text(0, 0.25, "Env")
mtext("Variation Partitioning of\nDoubs Fish Diversity", side = 3, line = -3)
# Chunk 7
jelly <- read.table("JellyBeans.txt", sep = "\t", header = TRUE)
group <- jelly$Group
jelly <- jelly[, -c(1:2)]
adonis(jelly ~ group, method = "bray", permutations = 999)
# Chunk 8
library(dplyr)
# Load data
crawley.full <- read.csv("Crawley.csv")
crawley.full %>%
group_by(Nativity.Code) %>%
summarize(grpcount = n())
# Those 8 empty ones are just empty rows at the bottom of the df. Let's get rid of those, as well as the two empty columns at the end
crawley.full <- crawley.full[-c(293:300), -c(24, 25)]
crawley <- crawley.full[, -c(1:3)]  # Get rid of non-incidence columns
crawley.species <- crawley.full$Species  # Save species as a vector
crawley <- as.matrix(t(crawley))
crawley.sbys <- matrix(crawley, ncol = ncol(crawley), dimnames = NULL)
# Ordination
crawley.db <- vegdist(crawley, method = "jaccard")
crawley.pcoa <- cmdscale(crawley.db, eig = TRUE, k = 3)
explainvar1 <- round(crawley.pcoa$eig[1] / sum(crawley.pcoa$eig), 3) * 100
explainvar2 <- round(crawley.pcoa$eig[2] / sum(crawley.pcoa$eig), 3) * 100
explainvar3 <- round(crawley.pcoa$eig[3] / sum(crawley.pcoa$eig), 3) * 100
sum.eig <- sum(explainvar1, explainvar2, explainvar3)
sum.eig   # Only 27% of variation explained by first 3 axes
par(mar = c(1, 5, 2, 2) + 0.1)
plot(crawley.pcoa$points[, 1], crawley.pcoa$points[, 2],
ylim = c(-0.2, 0.7),
xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
pch = 16, cex = 2, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
points(crawley.pcoa$points[, 1], crawley.pcoa$points[, 2], pch = 19, cex = 3, bg = "gray", col = "gray")
text(crawley.pcoa$points[, 1], crawley.pcoa$points[, 2], labels = row.names(crawley.pcoa$points))
# Hypothesis
# Test hypothesis
View(crawley)
View(crawley.sbys)
crawley.full %>%
group_by(Nativity.Code) %>%
summarize(grpcount = n())
crawley.full <- read.csv("Crawley.csv")
crawley.full %>%
group_by(Nativity.Code) %>%
summarize(grpcount = n())
crawley.full <- crawley.full[-c(293:300), -c(24, 25)]
crawley <- crawley.full[, -c(1:3)]  # Get rid of non-incidence columns
crawley.species <- crawley.full$Species  # Save species as a vector, in case we need it
crawley <- as.matrix(t(crawley))
crawley.sbys <- matrix(crawley, ncol = ncol(crawley), dimnames = NULL)
library(dplyr)
# Load data
crawley.full <- read.csv("Crawley.csv")
crawley.full %>%
group_by(Nativity.Code) %>%
summarize(grpcount = n())
# Those 8 empty ones are just empty rows at the bottom of the df. Let's get rid of those, as well as the two empty columns at the end
crawley.full <- crawley.full[-c(293:300), -c(24, 25)]
crawley <- crawley.full[, -c(1:3)]  # Get rid of non-incidence columns
crawley.species <- crawley.full$Species  # Save species as a vector, in case we need it
crawley <- as.matrix(t(crawley))
crawley.sbys <- matrix(crawley, ncol = ncol(crawley), dimnames = NULL)
# Ordination
crawley.db <- vegdist(crawley, method = "jaccard")
crawley.pcoa <- cmdscale(crawley.db, eig = TRUE, k = 3)
explainvar1 <- round(crawley.pcoa$eig[1] / sum(crawley.pcoa$eig), 3) * 100
explainvar2 <- round(crawley.pcoa$eig[2] / sum(crawley.pcoa$eig), 3) * 100
explainvar3 <- round(crawley.pcoa$eig[3] / sum(crawley.pcoa$eig), 3) * 100
sum.eig <- sum(explainvar1, explainvar2, explainvar3)
sum.eig   # Only 27% of variation explained by first 3 axes
par(mar = c(1, 5, 2, 2) + 0.1)
plot(crawley.pcoa$points[, 1], crawley.pcoa$points[, 2],
ylim = c(-0.2, 0.7),
xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
pch = 16, cex = 2, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
points(crawley.pcoa$points[, 1], crawley.pcoa$points[, 2], pch = 19, cex = 3, bg = "gray", col = "gray")
text(crawley.pcoa$points[, 1], crawley.pcoa$points[, 2], labels = row.names(crawley.pcoa$points))
# Hypothesis
# Test hypothesis
fish.rel
?add.spec.scores
add.spec.scores(crawley.pcoa, crawley.sbys, method = "pcoa.scores")
crawley.pcoa <- add.spec.scores(crawley.pcoa, crawley.sbys, method = "pcoa.scores")
crawley.pcoa
head(crawley.pcoa)
crawley.pcoa <- add.spec.scores(crawley.pcoa, crawley.sbys, method = "pcoa.scores")
head(crawley.pcoa)
data(doubs)
quality <- c(rep("HQ", 13), rep("MQ", 5), rep("LQ", 6), rep("MQ", 5))
fish <- doubs$fish
fish <- fish[-8, ]
adonis(fish ~ quality, method = "bray", permutations = 999)
fish
crawley.status <- crawley.full$Nativity.Code
adonis(crawley.sbys ~ crawley.status, method = "jaccard", permutations = 999)
length$crawley.status
class(crawley.status)
lenght(crawley.status)
length(crawley.status)
length(crawley.sbys)
class(fish)
class(crawley)
crawley.full <- read.csv("Crawley.csv")
crawley.full %>%
group_by(Nativity.Code) %>%
summarize(grpcount = n())
crawley.full <- crawley.full[-c(293:300), -c(24, 25)]
crawley.full <- crawley.full[, -c(1:3)]  # Get rid of non-incidence columns
crawley.species <- crawley.full$Species  # Save species as a vector, in case we need it
crawley.status <- crawley.full$Nativity.Code
crawley <- as.matrix(t(crawley))
crawley.sbys <- matrix(crawley, ncol = ncol(crawley), dimnames = NULL)
crawley.db <- vegdist(crawley, method = "jaccard")
crawley.pcoa <- cmdscale(crawley.db, eig = TRUE, k = 3)
explainvar1 <- round(crawley.pcoa$eig[1] / sum(crawley.pcoa$eig), 3) * 100
explainvar2 <- round(crawley.pcoa$eig[2] / sum(crawley.pcoa$eig), 3) * 100
explainvar3 <- round(crawley.pcoa$eig[3] / sum(crawley.pcoa$eig), 3) * 100
sum.eig <- sum(explainvar1, explainvar2, explainvar3)
sum.eig   # Only 27% of variation explained by first 3 axes
par(mar = c(1, 5, 2, 2) + 0.1)
plot(crawley.pcoa$points[, 1], crawley.pcoa$points[, 2],
ylim = c(-0.2, 0.7),
xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
pch = 16, cex = 2, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
points(crawley.pcoa$points[, 1], crawley.pcoa$points[, 2], pch = 19, cex = 3, bg = "gray", col = "gray")
text(crawley.pcoa$points[, 1], crawley.pcoa$points[, 2], labels = row.names(crawley.pcoa$points))
class(crawley.full)
View(crawley.full)
adonis(crawley.full ~ crawley.status, method = "jaccard", permutations = 999)
length(fish)
length(quality)
class(quality)
class(crawley.status)
crawley.status
crawley.status <- crawley.full$Nativity.Code
crawley.status
crawley.full$Nativity.Code
crawley.full <- read.csv("Crawley.csv")
crawley.full <- crawley.full[-c(293:300), -c(24, 25)]
crawley.crawley.df <- crawley.full[, -c(1:3)]  # Get rid of non-incidence columns
rm(crawley.crawley.df)
crawley.full <- crawley.full[-c(293:300), -c(24, 25)]
crawley.df <- crawley.full[, -c(1:3)]  # Get rid of non-incidence columns
crawley.species <- crawley.full$Species  # Save species as a vector, in case we need it
crawley <- as.matrix(t(crawley.df))
crawley.full <- read.csv("Crawley.csv")
crawley.full %>%
group_by(Nativity.Code) %>%
summarize(grpcount = n())
crawley.full <- crawley.full[-c(293:300), -c(24, 25)]
crawley.df <- crawley.full[, -c(1:3)]  # Get rid of non-incidence columns
crawley.species <- crawley.full$Species  # Save species as a vector, in case we need it
crawley <- as.matrix(t(crawley.df))
crawley.sbys <- matrix(crawley, ncol = ncol(crawley), dimnames = NULL)
crawley.status <- crawley.full$Nativity.Code
crawley.status
class(crawley.status)
crawley.status <- as.character(crawley.full$Nativity.Code)
class(crawley.status)
fish
class(fish)
adonis(crawley.df ~ crawley.status, method = "jaccard", permutations = 999)
length(crawley.df)
length(crawley.status)
rm(crawley.status)
colSums(crawley.df)
class(colSums(crawley.df))
colSums(crawley.df) / nrow(crawley.df)
percent.invasive <- colSums(crawley.df) / nrow(crawley.df)
adonis(crawley.df ~ percent.invasive, method = "jaccard", permutations = 999)
fish
crawley.sbys
crawley.df
View(crawley.df)
class(crawley.df)
class(fish)
crawley.pcoa <- add.spec.scores(crawley.pcoa, crawley.sbys, method = "pcoa.scores")
crawley.pcoa
fish.pcoa$cproj
text(crawley.pcoa$cproj[, 1], crawley.pcoa$cproj[, 2],
labels = row.names(crawley.pcoa$cproj), col = "black")
par(mar = c(1, 5, 2, 2) + 0.1)
plot(crawley.pcoa$points[, 1], crawley.pcoa$points[, 2],
ylim = c(-0.2, 0.7),
xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
pch = 16, cex = 2, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
points(crawley.pcoa$points[, 1], crawley.pcoa$points[, 2], pch = 19, cex = 3, bg = "gray", col = "gray")
text(crawley.pcoa$points[, 1], crawley.pcoa$points[, 2], labels = row.names(crawley.pcoa$points))
crawley.pcoa <- add.spec.scores(crawley.pcoa, crawley.sbys, method = "pcoa.scores")
text(crawley.pcoa$cproj[, 1], crawley.pcoa$cproj[, 2],
labels = row.names(crawley.pcoa$cproj), col = "black")
# Chunk 1
rm(list = ls())
getwd()
setwd("~/GitHub/QB2019_Bolin/2.Worksheets/8.BetaDiversity/")
require("vegan")
package.list <- c("vegan", "ade4", "viridis", "gplots", "BiodiversityR", "indicspecies")
for (package in package.list) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
install.packages(package)
library(package, character.only = TRUE)
}
}
# Chunk 2
# note, please do not print the dataset when submitting
data(doubs)
str(doubs)
# Chunk 3
beta.w <- function(site.by.species, sitenum1, sitenum2, pairwise = FALSE) {
if (pairwise == TRUE) {
if (sitenum1 == "" | sitenum2 == "") {
print("Error: please specify sites to compare")
return(NA)
}
site1 = site.by.species[sitenum1, ]
site2 = site.by.species[sitenum2, ]
site1 = subset(site1, select = site1 > 0)
site2 = subset(site2, select = site2 > 0)
gamma = union(colnames(site1), colnames(site2))
s = length(gamma)
a.bar = mean(c(specnumber(site1), specnumber(site2)))
b.w = round(s/a.bar - 1, 3)
return(b.w)
}
else {
SbyS.pa <- decostand(site.by.species, method = "pa")
S <- ncol(SbyS.pa[, which(colSums(SbyS.pa) > 0)])
a.bar <- mean(specnumber(SbyS.pa))
b.w <- round(S/a.bar, 3)
return(b.w)
}
}
# pairwise between sites 1 and 2
beta.w(doubs$fish, 1, 2, TRUE)
# pairwise between sites 1 and 10
beta.w(doubs$fish, 1, 10, TRUE)
# Chunk 4
fish <- doubs$fish
fish <- fish[-8, ]
fish.ds <- vegdist(fish, method = "bray", binary = TRUE)
fish.db <- vegdist(fish, method = "bray")
# Chunk 5
order <- rev(attr(fish.db, "Labels"))
levelplot(as.matrix(fish.db)[, order],
aspect = "iso",
col.regions = inferno,
xlab = "Doubs Site",
ylab = "Doubs Site",
scales = list(cex = 0.5),
main = "Bray-Curtis Distance")
# Chunk 6
fish.ward <- hclust(fish.db, method = "ward.D2")
par(mar = c(1, 5, 2, 2) + 0.1)
plot(fish.ward,
main = "Doubs River Fish: Ward's Clustering",
ylab = "Squared Bray-Curtis Distance")
fish.pcoa <- cmdscale(fish.db, eig = TRUE, k = 3)
fish.pcoa$cproj
